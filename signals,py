import os
import pandas as pd
import numpy as np
from datetime import datetime
from ta.momentum import RSIIndicator

from paths import signals_csv, month_dir


def detect_rsi_signals(df: pd.DataFrame, ticker: str, *, date_folder: str | None = None):
    """Detect RSI-based BUY/SELL signals and persist them.

    Parameters
    ----------
    df : pd.DataFrame
        DataFrame that **already** contains an 'RSI' column.
    ticker : str
        Ticker symbol (used for logging and for the CSV path).

    Returns
    -------
    tuple[pd.Series | None, pd.Series | None, pd.DataFrame | None]
        buy_mask, sell_mask, and a DataFrame of the generated/updated signals
        (or (None, None, None) if no signals were found).
    """
    try:
        # Debug prints
        print(f"\nDetecting RSI signals for {ticker}")
        print(f"DataFrame shape: {df.shape}")
        print(f"DataFrame columns: {df.columns.tolist()}")
        
        # Make sure we have RSI in the DataFrame
        if 'RSI' not in df.columns:
            print("RSI column not found, calculating...")
            rsi = RSIIndicator(close=df['Close'], window=14).rsi()
            df['RSI'] = rsi
        
        # Debug: print RSI stats
        print(f"RSI stats: min={df['RSI'].min():.2f}, max={df['RSI'].max():.2f}, mean={df['RSI'].mean():.2f}")
        print(f"  RSI < 30 count: {(df['RSI'] < 30).sum()}")
        print(f"  RSI > 70 count: {(df['RSI'] > 70).sum()}")
        
        # Create empty DataFrames for signals
        buy_signals = pd.DataFrame()
        sell_signals = pd.DataFrame()
        
        # Detect buy signals (RSI < 30)
        buy_mask = df['RSI'] < 30
        if buy_mask.any():
            buy_signals = df[buy_mask].copy()
            buy_signals['Signal'] = 'BUY'
            print(f"Found {len(buy_signals)} BUY signals")
        
        # Detect sell signals (RSI > 70)
        sell_mask = df['RSI'] > 70
        if sell_mask.any():
            sell_signals = df[sell_mask].copy()
            sell_signals['Signal'] = 'SELL'
            print(f"Found {len(sell_signals)} SELL signals")
        
        # Prepare signals DataFrame
        signals_df = pd.concat([buy_signals, sell_signals], ignore_index=True)
        signals_df['Ticker'] = ticker
        signals_df['RSI_Value'] = signals_df['RSI']
        signals_df = signals_df[['Ticker', 'Signal', 'RSI_Value']]
        
        # Save signals to CSV
        signals_path = signals_csv(ticker, date_folder)
        os.makedirs(os.path.dirname(signals_path), exist_ok=True)
        
        print(f"Saving signals to: {signals_path}")
        
        # Check if file exists and append or create new
        if os.path.exists(signals_path):
            try:
                existing_signals = pd.read_csv(signals_path, index_col=0, parse_dates=True)
                combined_signals = pd.concat([existing_signals, signals_df])
                combined_signals = combined_signals[~combined_signals.index.duplicated(keep='last')]
                combined_signals.to_csv(signals_path)
                print(f"Updated signals file with {len(signals_df)} new signals")
            except Exception as e:
                print(f"Error reading existing signals file, creating new: {str(e)}")
            
            # Check if file exists and append or create new
            if os.path.exists(signals_path):
                try:
                    existing_signals = pd.read_csv(signals_path, index_col=0, parse_dates=True)
                    combined_signals = pd.concat([existing_signals, signals_df])
                    combined_signals = combined_signals[~combined_signals.index.duplicated(keep='last')]
                    combined_signals.to_csv(signals_path)
                    print(f"Updated signals file with {len(signals_df)} new signals")
                except Exception as e:
                    print(f"Error reading existing signals file, creating new: {str(e)}")
                    signals_df.to_csv(signals_path)
                    print(f"Created signals file with {len(signals_df)} signals")
            else:
                signals_df.to_csv(signals_path)
                print(f"Created new signals file with {len(signals_df)} signals")
        else:
            print("No signals detected")
            
        return buy_signals, sell_signals, signals_df
        
    except Exception as e:
        print(f"Error detecting RSI signals: {str(e)}")
        import traceback
        traceback.print_exc()
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame()
                    'price_change_pct': round(float(price_change_pct), 4),
                    'volatility': round(float(volatility), 4),
                    'volume_ratio': round(float(volume_ratio), 4),
                    'macd': round(float(macd_value), 4),
                    'macd_signal': round(float(macd_signal_value), 4),
                    'macd_histogram': round(float(macd_histogram), 4),
                    'market_cap_proxy': round(float(current_close * current_volume), 2),
                    'intraday_range': round(float((current_high - current_low) / current_close * 100), 4),
                    'gap_from_open': round(float((current_close - current_open) / current_open * 100), 4),
                    'signal_strength': 'STRONG' if (signal_type == 'BUY' and current_rsi < 40) or (signal_type == 'SELL' and current_rsi > 60) else 'WEAK',
                    'market_session': 'REGULAR',
                    'trend_direction': 'UP' if price_change > 0 else 'DOWN' if price_change < 0 else 'FLAT'
                }
                
                signal_rows.append(signal_data)
                
            except Exception as e:
                print(f"❌ Error processing signal at index {i}: {str(e)}")
                continue

    # Prepare folder & path for saving signals
    folder = date_folder if date_folder else datetime.now().strftime("%Y%m%d")
    signal_path = str(signals_csv(ticker, folder))
    os.makedirs(os.path.dirname(signal_path), exist_ok=True)

    if not signal_rows:
        print(f"🔕 No RSI signals for {ticker}")
        # Ensure an empty file exists for consistency
        if not os.path.exists(signal_path):
            pd.DataFrame(columns=['datetime','ticker','signal','rsi','price']).to_csv(signal_path, index=False)
        return None, None, None

    signal_df = pd.DataFrame(signal_rows)

    # Merge with existing to prevent duplicates
    if os.path.exists(signal_path):
        existing = pd.read_csv(signal_path, parse_dates=['datetime'])
        combined = pd.concat([existing, signal_df], ignore_index=True)
        combined.drop_duplicates(subset=['datetime', 'signal'], inplace=True)
        combined.sort_values('datetime', inplace=True)
        combined.to_csv(signal_path, index=False)
        print(f"🔔 Updated {len(signal_rows)} RSI signals for {ticker}")
    else:
        signal_df.to_csv(signal_path, index=False)
        print(f"🔔 Saved {len(signal_rows)} new RSI signals for {ticker}")

    return buy_mask, sell_mask, signal_df
